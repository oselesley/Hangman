{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/hangman.js","webpack:///./src/requests-fetch.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Hangman","[object Object]","word","remainingGuesses","this","split","guesses","status","puzzle","forEach","letter","includes","toLowerCase","statusMsg","msg","guessNum","join","guess","obj","isUnique","isBadGuess","push","calculateStatus","finished","every","renderHangman","document","querySelector","innerHTML","appendChild","generateHangmanDOM","textContent","letterEl","createElement","setAttribute","getPuzzleAsync","async","wordCount","url","test","console","log","puzzleData","fetch","json","player1","startGame","userGuess","window","addEventListener","e","key"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","'use strict'\r\n\r\nclass Hangman {\r\n  constructor (word, remainingGuesses) {\r\n    this.word = word.split('')\r\n    this.guesses = []\r\n    this.remainingGuesses = remainingGuesses\r\n    this.status = 'play'\r\n  }\r\n  // Returns a string showing the guessed letters and asterisks representing unguessed letters\r\n  get puzzle () {\r\n    let puzzle = ''\r\n    this.word.forEach(letter => {\r\n      puzzle += (this.guesses.includes(letter.toLowerCase()) || letter === ' ') ? letter : '*'\r\n    })\r\n    return puzzle\r\n  }\r\n  // Generate the status message based on any of three states play, finished or failed\r\n  get statusMsg () {\r\n    let guessNum = this.remainingGuesses === 1 ? 'guess' : 'guesses'\r\n    let msg\r\n    if (this.status === 'play') {\r\n      msg = `You have ${this.remainingGuesses} ${guessNum} left`\r\n    } else if (this.status === 'finished') {\r\n      msg = 'Great work! You guessed the word'\r\n    } else if (this.status === 'failed') msg = `Nice try!! The word is \"${this.word.join('')}\"`\r\n    return msg\r\n  }\r\n  // The main guess logic\r\n  userGuess (guess) {\r\n    let obj\r\n    // for finished, it waits for user keypress before recalculating status, even after the last value has been\r\n    // put in\r\n    if (this.status === 'play') {\r\n      guess = guess.toLowerCase()\r\n      let isUnique = !this.guesses.includes(guess)\r\n      let isBadGuess = !this.word.join('').toLowerCase().includes(guess)\r\n      if (isUnique) {\r\n        this.guesses.push(guess.toLowerCase())\r\n      }\r\n      if (isUnique && isBadGuess) {\r\n        this.remainingGuesses--\r\n      }\r\n      obj = [this.puzzle, this.statusMsg]\r\n    } else if (this.status === 'finished') obj = [this.puzzle, this.statusMsg]\r\n    else if (this.status === 'failed') obj = [this.puzzle, this.statusMsg]\r\n    this.calculateStatus()\r\n    return obj\r\n  }\r\n  // calculates game status..\r\n  calculateStatus () {\r\n  // userGuess runs status and gives a number, before the else clause above updates remainingGuesses\r\n  // so I had to use < 2 so by the time status is called, remainingGuesses would've been updated\r\n    let finished = this.word.every(letter => letter !== ' ' ? this.guesses.includes(letter.toLowerCase()) : true)\r\n    if (this.remainingGuesses < 1) {\r\n      this.status = 'failed'\r\n    } else if (finished) {\r\n      this.status = 'finished'\r\n    } else this.status = 'play'\r\n  }\r\n}\r\n\r\nconst renderHangman = (puzzle) => {\r\n  document.querySelector('div').innerHTML = ''\r\n  puzzle[0].split('').forEach(letter => {\r\n    document.querySelector('.puzzle').appendChild(generateHangmanDOM(letter))\r\n  })\r\n  document.querySelector('small').textContent = puzzle[1]\r\n}\r\n\r\nconst generateHangmanDOM = function (letter) {\r\n  let letterEl = document.createElement('span')\r\n  letterEl.textContent = letter\r\n  letterEl.setAttribute('class', 'letter')\r\n  return letterEl\r\n}\r\n\r\nexport { Hangman as default, renderHangman, generateHangmanDOM }\r\n","// My won fetch\r\n// Some notes: in the if condition there is no else, because the readyState moves from 1 - 4, at the point where its\r\n// any number other than 4, with an else it would raise an error, hence i removed the else condition\r\n// I send the entire request object to the client that accesses the api through resolve method\r\nfunction myFetch(url) {\r\n  return new Promise((resolve, reject) => {\r\n    let request = new XMLHttpRequest()\r\n    request.open('GET', url)\r\n    request.send()\r\n    request.addEventListener('readystatechange', e => {\r\n      if (e.target.readyState === 4) {\r\n        resolve(request)\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\n// The getCountry function uses the myFetch api, and when its called, it returns the a promise, containing the request object\r\n// We access that request object and manipulate it as desire, here, by checking its status if it returned anything, if it did,\r\n// we parse its text (request.responseText) and do further manipulations with the data\r\n\r\nconst getPuzzleAsync = async (wordCount, url) => {\r\n  url = /http(s?):\\/\\/\\w*/.test(url) ? url : `https://${url}?wordCount=${wordCount}`\r\n  console.log(url)\r\n  const puzzleData = await fetch(url)\r\n  return await puzzleData.json()\r\n}\r\n\r\nconst getPuzzle = (url, wordCount) => {\r\n  url = /http(s?):\\/\\/\\w*/.test(url) ? url : `https://${url}?wordCount=${wordCount}`\r\n  return fetch(url, {}).then(response => {\r\n    if (response.status === 200) {\r\n      return response.json()\r\n    } else {\r\n      throw new Error('Unable to get puzzle')\r\n    }\r\n  }).then(data => {\r\n    return data.puzzle\r\n  })\r\n}\r\n\r\nconst getCurrentCountry = async () => {\r\n  const ipData = await getLocationAsync()\r\n  return await getCountryAsync(ipData.country)\r\n}\r\nconst getLocationAsync= async (ip) => {\r\n  ip = !ip ? `https://ipinfo.io/json?token=657ddf1c67ad85` : `https://ipinfo.io/${ip}/json?token=657ddf1c67ad85`\r\n  let location = await fetch(ip, {})\r\n  if (location.status === 200) return location.json()\r\n}\r\n\r\nconst getCountryAsync = async (code) => {\r\n  const countryData = await fetch('https://restcountries.eu/rest/v2/all', {})\r\n  if (countryData.status === 200) {\r\n    const countries = await countryData.json()\r\n    return countries.find(country => country.alpha2Code === code)\r\n  } else throw new Error('Unable to get country')\r\n}\r\n\r\nconst getCountry = (code) => fetch('https://restcountries.eu/rest/v2/all', {}).then(response => {\r\n  if (response.status === 200) {\r\n    return response.json()\r\n  } else throw new Error('Unable to get country')\r\n}).then(data => data.find(country => country.alpha2Code === code))\r\n\r\nconst getLocationFetch = (ip) => {\r\n  console.log(ip)\r\n  ip = !ip ? `https://ipinfo.io/json?token=657ddf1c67ad85` : `https://ipinfo.io/${ip}/json?token=657ddf1c67ad85`\r\n  console.log(ip)\r\n  return fetch(ip, {}).then(response => {\r\n    if (response.status === 200) return response.json()\r\n  })\r\n}\r\n\r\nconst getLocationPromise = (ip) => {\r\n  ip = !ip ? `https://ipinfo.io/json?token=657ddf1c67ad85` : `https://ipinfo.io/${ip}/json?token=657ddf1c67ad85`\r\n\r\n  return new Promise ((resolve, reject) => {\r\n    let request = new XMLHttpRequest()\r\n    request.open('GET', ip)\r\n    request.send()\r\n    request.addEventListener('readystatechange', e => {\r\n      if (e.target.readyState === 4 && e.target.status === 200) {\r\n        resolve(JSON.parse(e.target.responseText))\r\n      } else if (e.target.readyState === 4) reject(new Error('Could not fetch ip data'))\r\n    })\r\n  })\r\n}\r\n\r\nconst getLocationCallback = (ip, callback) => {\r\n  ip = !ip ? `https://ipinfo.io/json?token=657ddf1c67ad85` : `https://ipinfo.io/${ip}/json?token=657ddf1c67ad85`\r\n\r\n  let request = new XMLHttpRequest()\r\n  request.open('GET', ip)\r\n  request.send()\r\n  request.addEventListener('readystatechange', e => {\r\n    if (e.target.readyState === 4 && e.target.status === 200) {\r\n      callback(undefined, JSON.parse(e.target.responseText))\r\n    } else if (e.target.readyState === 4) callback(new Error('Could not fetch ip data'), undefined)\r\n  })\r\n}\r\n\r\nexport { getPuzzleAsync as default }\r\n","'use strict'\r\nimport Hangman, { renderHangman } from './hangman.js'\r\nimport getPuzzleAsync from './requests-fetch'\r\n\r\nlet player1\r\nstartGame()\r\nwindow.addEventListener('keypress', e => {\r\n  renderHangman(player1.userGuess(e.key))\r\n  if (player1.status === 'finished' || player1.status === 'failed') renderHangman(player1.userGuess(''))\r\n})\r\n// Render the success message to the screen immediately after the user wins or fails instead of\r\n// waiting for another keypress. Once user is done playing he/she isn't supposed to click a button\r\n// so we re-render based on finished, failed state\r\n\r\ndocument.querySelector('#reset').addEventListener('click', e => {\r\n  startGame()\r\n})\r\n\r\nasync function startGame () {\r\n  let puzzle = await getPuzzleAsync(2, 'puzzle.mead.io/puzzle')\r\n  console.log(puzzle)\r\n  player1 = new Hangman(puzzle.puzzle, 3)\r\n  renderHangman(player1.userGuess(''))\r\n}\r\n"],"sourceRoot":""}